import json
from aiogram import Router, types, F
from config import CHANNEL_ID, ADMIN_ID
from utils import is_spam
from pathlib import Path
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import time

router = Router()

IGNORED_TEXTS = ["/start", "/help", "üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", "üì¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]

@router.message(F.chat.type == "private")
async def handle_post(message: types.Message):
    user_id = str(message.from_user.id)
    text = message.text or ""

    if text in IGNORED_TEXTS:
        return



BASE_DIR = Path(__file__).parent.parent
DATA_PATH = BASE_DIR / "data" / "storage.json"
DATA_PATH.parent.mkdir(parents=True, exist_ok=True)

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not DATA_PATH.exists():
    DATA_PATH.write_text("{}")

def load_data():
    with open(DATA_PATH, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_PATH, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

@router.message(F.chat.type == "private")
async def handle_post(message: types.Message):
    user_id = str(message.from_user.id)
    text = message.text or ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–º–∞
    reason = is_spam(text)
    if reason:
        await message.answer(f"üö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {reason}")
        return

    db = load_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º
    for uid, info in db.items():
        if text == info.get("last_post"):
            await message.answer("‚ö† –ü–æ—Ö–æ–∂–∞—è –≤–∞–∫–∞–Ω—Å–∏—è —É–∂–µ –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
            return

    # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
    post = await message.bot.send_message(
        chat_id=CHANNEL_ID,
        text=text,
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="‚ö† –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è",
                    callback_data=f"report:{user_id}:{message.message_id}"
                )]
            ]
        )
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    db[user_id] = {
        "last_post": text,
        "timestamp": time.time(),  # <--- –î–æ–±–∞–≤—å —ç—Ç–æ, —á—Ç–æ–±—ã 24 —á–∞—Å–∞ —Å—á–∏—Ç–∞—Ç—å
        "post_id": post.message_id,
        "reports": 0
    }

    await message.answer("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")

@router.message(Command("pin_button"))
async def pin_button_handler(message: types.Message):
    if str(message.from_user.id) != str(ADMIN_ID):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    await message.bot.send_message(
        chat_id=CHANNEL_ID,
        text="üöÄ –•–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é? –ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é",
                        url=f"https://t.me/{(await message.bot.me()).username}"
                    )
                ]
            ]
        )
    )
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª. –ó–∞–∫—Ä–µ–ø–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.")
